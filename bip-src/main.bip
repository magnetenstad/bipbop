
greet :: string name -> {
  >_ ("Hello " + name + "!");
};

sum :: int a, int b -> int {
  >> (a + b);
};

hello_world :: -> { >_ "Hello world!" };

print :: string text -> { >_ text };

half :: float a -> float { >> a / 2 };

assert :: bool assertion, string message -> {
  (! assertion) ? {
    >_ message;
  };
};

>_ 1;

greet("2");

>_ sum(2, 1);

>_ sum(1, (sum(1, (sum(1, 1)))));

y = (2 + 2 / 2 + 1 * 3 - 1);

greet(y);

(true) ? {
  >_ "true is always true";
};

(! true) ? {
  >_ "false should not be true";
};

(!(! false)) ? {
  >_ "not not not";
};

(y == 5) ? { >_ "y is five!" };

(y == 5) ? {
  >_ "y is five!"
};

--- Some work in progress
z = ((y == 5) ? { >> "five!" } : { >> "not five!" });
z = (y == 5) ? "five!" : "not five!";
---

assert((y == 5), "y should be five");
assert((y != 5), "never mind");
